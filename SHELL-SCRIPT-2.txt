
How to read a value at runtime in shell scripting?
===================================================

1. Read basic input
-----------------------

#!/bin/bash

# Prompt user to enter their name
echo "Enter your name:"
read name

echo "Hello, $name! Welcome to the script."











2. Using -p Option for Prompt
-----------------------------

#!/bin/bash

# Prompt user for input with a custom prompt
read -p "Enter your age: " age

echo "You entered: $age years old."









3. Read the input one after another
-----------------------------------
#!/bin/bash

# Reading multiple values
echo "Please enter your name:"
read name

echo "Please enter your age:"
read age

# Output a summary of the entered details
echo "Hello, $name! You are $age years old."



#!/bin/bash

# Reading multiple values
echo "Please enter your name and Age:"
read name age1

# Output a summary of the entered details
echo "Hello, $name! You are $age1 years old."















4. Reading input as an array
-----------------------------

we will discuss in arrays















5. Reading Input with Timeout
------------------------------

#!/bin/bash

# Prompt user for input with a timeout
read -t 10 -p "Enter your password within 10 seconds: " password

if [ -z "$password" ]; then
    echo "No password entered within 10 seconds."
else
    echo "Password entered: $password"
fi






6. Reading Input Silently (Password Input)
------------------------------------------

#!/bin/bash

# Prompt user for password input (silent)
read -s -p "Enter your password: " password
echo    # Move to a new line after password input

# Validate or process the password input
echo "Password entered."
















Operators in shell scripting
=============================

In shell scripting, operators are used to perform various operations like arithmetic, comparison, logical operations, and string manipulations. Here's a detailed overview of different types of operators in shell scripting with examples:








1. Arithmetic Operators
--------------------------
#!/bin/bash

# Arithmetic Operators
a=20
b=5
echo "Arithmetic Operations:"
echo "Addition o two numbers $(( a + b ))"
echo "a - b = $(( a - b ))"
echo "a * b = $(( a * b ))"
echo "a / b = $(( a / b ))"
echo "a % b = $(( a % b ))"

sh open1.sh  20 5

$1, $2










2. Comparison Operators
------------------------

a=20
b=30

echo "Comparison Operations:"
if [ $a -eq $b ]; then  #==
    echo "a is equal to b"
fi
if [ $a -ne $b ]; then #!=
    echo "a is not equal to b"
fi
if [ $a -gt $b ]; then #>
    echo "a is greater than b"
fi
if [ $a -lt $b ]; then  #<
    echo "a is less than b"
fi

-ge(>=) ---> greater than equal to
-le(<=) ---> less than equal to













3. Logical Operators
--------------------
&&[AND]
===

A   B  A&&B
------------
T   T   T
T   F   F
F   T   F
F   F   F


||[OR]
---
A    B   A||B
--------------
T    T     T
T    F     T
F    T     T
F    F     F


a=30
b=5
echo "Logical Operations:"
if [ $a -eq 20 ] && [ $b -eq 5 ]; then
    echo "Both conditions are true"
fi
if [ $a -eq 10 ] || [ $b -eq 5 ]; then
    echo "At least one condition is true"
fi
if ! [ $a -eq 0 ]; then
    echo "a is not equal to 0"
fi








4. String Operators
-------------------

# String Operators
str1="Hello"
str2="World"
echo "String Operations:"
echo "=================="
if [ "$str1" = "$str2" ]; then
    echo "Strings are equal"
fi
if [ "$str1" != "$str2" ]; then
    echo "Strings are not equal"
fi
str3="$str1 $str2"
echo "Concatenated string: $str3"
length=${#str1}
echo "Length of str1 is $length"


















control statements in shell scripting
======================================

Control statements in shell scripting allow you to control the flow of execution based on certain conditions or loops. They help in making decisions, repeating code blocks, and branching based on conditions. Hereâ€™s a detailed explanation of the main control statements in shell scripting:


1. if statement
----------------
if [ condition ]; then
    # Code block to execute if condition is true
fi

2. if-else Statement
--------------------

The if-else statement allows you to execute a block of code if a specified condition is true, otherwise, another block of code is executed.

Syntax:

if [ condition ] 
then
    # Code block to execute if condition is true
else
    # Code block to execute if condition is false
fi











Example 1:
-----------
#!/bin/bash

# Example of if-else statement
a=10

if [ $a -eq 10 ]; then
    echo "Value of a is 10"
else
    echo "Value of a is not 10"
fi











Example 2:
----------
#!/bin/bash

# Example of checking file existence using if and else statement
file="demo.sh"

if [ -f "$file" ]
then
    echo "File $file exists."
else
    echo "File $file does not exist."
fi










Example 3:  Checking Connectivity
----------  

#!/bin/bash

# Example of using if-else to check internet connectivity
ping_result=$(ping -c 1 google.com 2>&1)

if [[ $ping_result == *"icmp_seq"* ]]
then
    echo "Internet connectivity is up."
else
    echo "Internet connectivity is down."
fi











3. if-elif-else Statement
-------------------------

The if-elif-else statement allows you to test multiple conditions and execute a block of code as soon as one of the conditions evaluates to true.

Syntax:
-------


if [ condition1 ]; then
    # Code block to execute if condition1 is true
elif [ condition2 ]; then
    # Code block to execute if condition2 is true
else
    # Code block to execute if all conditions are false
fi








Example: 1
-----------

#!/bin/bash

# Example of if-elif-else statement

a=20
if [ $a -eq 10 ]; then
    echo "Value of a is 10"
elif [ $a -eq 20 ]; then
    echo "Value of a is 20"
else
    echo "Value of a is neither 10 nor 20"
fi














Example 2:  Checking Disk Space and Taking Action
-----------

#!/bin/bash

# Example of using if-elif-else to check disk space and take action
threshold_critical=15
threshold_warning=12
current_usage=$(df -h / | awk 'NR==2 {print $5}' | cut -d'%' -f1)

echo "Current disk usage: $current_usage%"

if [ $current_usage -ge $threshold_critical ]  # >=
then
    echo "Disk usage is critical ($current_usage%). Taking immediate action!"
    # Add commands to free up disk space or notify administrators
elif [ $current_usage -ge $threshold_warning ]
then
    echo "Disk usage is high ($current_usage%). Consider freeing up space."
    # Add commands to optimize disk usage
else
    echo "Disk usage is normal ($current_usage%)."
fi










Example 3:
----------

#!/bin/bash

# Example of using if-elif-else to handle different types of user input
read -p "Enter a number (1-3): " num

if [ "$num" -eq 1 ]
then
    echo "You entered the number one."
elif [ "$num" -eq 2 ]
then
    echo "You entered the number two."
elif [ "$num" -eq 3 ]
then
    echo "You entered the number three."
else
    echo "Invalid input: Please enter a number between 1 and 3."
fi


Example 4:  Checking Network Connectivity Status
----------

#!/bin/bash

# Example of using if-elif-else to check network connectivity status
ping_result=$(ping -c 1 google.com 2>&1)

if [[ $ping_result == *"icmp_seq"* ]]
then
    echo "Internet connectivity is up."
elif [[ $ping_result == *"unknown host"* ]]
then
    echo "Unable to resolve DNS. Check your network configuration."
else
    echo "Internet connectivity is down."
fi



4. case statement in shell scripting
------------------------------------

syntax:
-------
case variable in
    pattern1)
        # Commands to execute if variable matches pattern1
        ;;
    pattern2)
        # Commands to execute if variable matches pattern2
        ;;
    pattern3 | pattern4)
        # Commands to execute if variable matches either pattern3 or pattern4
        ;;
    *)
        # Default commands to execute if variable matches none of the above patterns
        ;;
esac





Example 1:
--------
#!/bin/bash

# Example of a basic case statement
fruit="apple"

case $fruit in
    apple)
        echo "It's a fruit: apple."
        ;;
    banana)
        echo "It's a fruit: banana."
        ;;
    orange | mandarin)
        echo "It's a citrus fruit."
        ;;
    *)
        echo "Unknown fruit."
        ;;
esac

Example 2: Checking Days of the Week
---------
#!/bin/bash

# Example of using case to check days of the week
day="Monday"

case $day in
    Monday | Tuesday | Wednesday | Thursday | Friday)
        echo "$day is a weekday."
        ;;
    Saturday | Sunday)
        echo "$day is a weekend day."
        ;;
    *)
        echo "Invalid day."
        ;;
esac


Example 3: Handling Menu Options
----------
#!/bin/bash

# Example of using case to handle menu options
echo "Menu:"
echo "====="
echo "1. Display date"
echo "2. Display calendar"
echo "3. Display current directory"
echo "4. Exit"

read -p "Enter your choice: " choice

case $choice in
    1)
        date
        ;;
    2)
        cal
        ;;
    3)
        pwd
        ;;
    4)
        echo "Exiting program."
        exit 0
        ;;
    *)
        echo "Invalid choice: $choice. Please enter a number between 1 and 4."
        ;;
esac



scp -i /c/Users/gpras/Downloads/testmc.pem /c/Users/gpras/Downloads/Shell_Scripting_New.txt ec2-user@13.232.216.223:/home/ec2-user/


scp -i /c/Users/gpras/Downloads/testmc.pem ec2-user@13.232.216.223:/home/ec2-user/R2.sh  /c/Users/gpras/Downloads/R2.sh 

